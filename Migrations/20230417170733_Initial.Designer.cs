// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using lab_medicine_api.Models;

#nullable disable

namespace lab_medicine_api.Migrations
{
    [DbContext(typeof(LabMedicineContext))]
    [Migration("20230417170733_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("lab_medicine_api.Models.AppointmentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DoctorModelId")
                        .HasColumnType("int");

                    b.Property<int>("IdDoctor")
                        .HasColumnType("int")
                        .HasColumnName("ID_DOCTOR");

                    b.Property<int>("IdPatient")
                        .HasColumnType("int")
                        .HasColumnName("ID_PATIENT");

                    b.Property<int?>("PatientModelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorModelId");

                    b.HasIndex("PatientModelId");

                    b.ToTable("APPOINTMENTS");
                });

            modelBuilder.Entity("lab_medicine_api.Models.PersonModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("BIRTH_DATE");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CPF");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("GENDER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NAME");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PHONE_NUMBER");

                    b.HasKey("Id");

                    b.ToTable("PERSON");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("lab_medicine_api.Models.DoctorModel", b =>
                {
                    b.HasBaseType("lab_medicine_api.Models.PersonModel");

                    b.Property<int>("AppointmentCount")
                        .HasColumnType("int")
                        .HasColumnName("APPOINTMENT_COUNT");

                    b.Property<int>("ClinicalSpecialization")
                        .HasColumnType("int")
                        .HasColumnName("CLINICAL_SPECIALIZATION");

                    b.Property<string>("CrmUf")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CRM_UF");

                    b.Property<string>("EducationalInstitution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EDUCATIONAL_INSTITUTION");

                    b.Property<int>("StatusInSystem")
                        .HasColumnType("int")
                        .HasColumnName("STATUS_IN_SYSTEM");

                    b.ToTable("DOCTORS");
                });

            modelBuilder.Entity("lab_medicine_api.Models.NurseModel", b =>
                {
                    b.HasBaseType("lab_medicine_api.Models.PersonModel");

                    b.Property<string>("CofenUf")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("COFEN_UF");

                    b.Property<string>("EducationalInstitution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EDUCATIONAL_INSTITUTION");

                    b.ToTable("NURSES");
                });

            modelBuilder.Entity("lab_medicine_api.Models.PatientModel", b =>
                {
                    b.HasBaseType("lab_medicine_api.Models.PersonModel");

                    b.Property<string>("Allergies")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ALLERGIES");

                    b.Property<int>("AppointmentCount")
                        .HasColumnType("int")
                        .HasColumnName("APPOINTMENT_COUNT");

                    b.Property<string>("AttendanceStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ATTENDANCE_STATUS");

                    b.Property<string>("EmergencyContact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EMERGENCY_CONTACT");

                    b.Property<string>("Insurance")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("INSURANCE");

                    b.Property<string>("SpecificCares")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SPECIFIC_CARE");

                    b.ToTable("PATIENTS");
                });

            modelBuilder.Entity("lab_medicine_api.Models.AppointmentModel", b =>
                {
                    b.HasOne("lab_medicine_api.Models.DoctorModel", null)
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorModelId");

                    b.HasOne("lab_medicine_api.Models.PatientModel", null)
                        .WithMany("Appointments")
                        .HasForeignKey("PatientModelId");
                });

            modelBuilder.Entity("lab_medicine_api.Models.DoctorModel", b =>
                {
                    b.HasOne("lab_medicine_api.Models.PersonModel", null)
                        .WithOne()
                        .HasForeignKey("lab_medicine_api.Models.DoctorModel", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("lab_medicine_api.Models.NurseModel", b =>
                {
                    b.HasOne("lab_medicine_api.Models.PersonModel", null)
                        .WithOne()
                        .HasForeignKey("lab_medicine_api.Models.NurseModel", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("lab_medicine_api.Models.PatientModel", b =>
                {
                    b.HasOne("lab_medicine_api.Models.PersonModel", null)
                        .WithOne()
                        .HasForeignKey("lab_medicine_api.Models.PatientModel", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("lab_medicine_api.Models.DoctorModel", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("lab_medicine_api.Models.PatientModel", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
